"use strict";

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var IAQ = function () {
  function IAQ(gas_resistance, humidity) {
    var hum_ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 40;
    var gas_lo = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 50000;
    var gas_hi = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 500000;

    _classCallCheck(this, IAQ);

    this.gas_resistance = gas_resistance;
    this.humidity = humidity;
    this.hum_ref = hum_ref;
    this.hum_sd = .05; // +/- 5 % humidity OK
    this.gas_lo_limit = gas_lo; // Bad air quality limit
    this.gas_hi_lmt = gas_hi; // Good air quality limit
    this.gas_weight = 0.75; // bosch thinks gas is 3 times more important then humidity
    this.hum_weight = 1.0 - this.gas_weight; // the rest 25%
    this.calc();
  }

  /**
   *  Calculate gas contribution to IAQ index
   */


  _createClass(IAQ, [{
    key: "getGasScore",
    value: function getGasScore() {
      if (this.gas_resistance < 10000) {
        // probably still kohms since it can be megaohms
        this.gas_resistance = this.gas_resistance * 1000;
      } // else we suppose ohms already
      if (this.gas_resistance > this.gas_hi_lmt) this.gas_resistance = this.gas_hi_lmt;
      if (this.gas_resistance < this.gas_lo_limit) this.gas_resistance = this.gas_lo_limit;
      var drange = this.gas_hi_lmt - this.gas_lo_limit;
      var d1 = this.gas_lo_limit * (this.gas_weight / (this.gas_hi_lmt - this.gas_lo_limit));
      return (this.gas_weight / drange * this.gas_resistance - d1) * 100;
    }
  }, {
    key: "getHumidityScore",
    value: function getHumidityScore() {
      var sd = this.hum_ref * this.hum_sd;
      var hrl = this.hum_ref - sd;
      var hrh = this.hum_ref + sd;
      // console.log(sd, hrl, hrh);
      if (this.humidity >= hrl && this.humidity <= hrh) {
        // humidity +/-5% around optimum
        return this.hum_weight * 100;
      } else {
        if (this.humidity < hrl) {
          // sub-optimal
          return this.hum_weight / this.hum_ref * this.humidity * 100;
        } else {
          // probably humid
          return (-this.hum_weight / (100 - this.hum_ref) * this.humidity + 0.416666) * 100;
        }
      }
    }
  }, {
    key: "calc",
    value: function calc() {
      // Calculate this.humidity contribution to IAQ index
      this.hum_score = this.getHumidityScore(this.humidity);

      // Calculate gas contribution to IAQ index
      this.gas_score = this.getGasScore(this.gas_resistance);

      // Combine results for the final IAQ index value (0-100% where 100% is good
      // quality air)
      this.air_quality_score = this.hum_score + this.gas_score;
      this.iaqScore = Math.round((100 - this.air_quality_score) * 5);
    }
  }, {
    key: "values",
    value: function values() {
      if (this.values !== undefined) this.calc();
      return {
        humidity: this.humidity,
        gas_resistance: this.gas_resistance,
        hum_score: this.hum_score,
        gas_sore: this.gas_score,
        score: Math.round(this.air_quality_score),
        iaqScore: Math.round(this.iaqScore),
        msg: this.getMessageFromScore(this.iaqScore)
      };
    }
  }, {
    key: "getMessageFromScore",
    value: function getMessageFromScore(score) {
      // console.log(score);
      if (score >= 301) return "Hazardous";
      if (score >= 201 && score <= 300) return "Very Unhealthy";
      if (score >= 176 && score <= 200) return "Unhealthy";
      if (score >= 151 && score <= 175) return "Unhealthy for Sensitive Groups";
      if (score >= 51 && score <= 150) return "Moderate";
      if (score >= 0 && score <= 50) return "Good";
      return "computer says " + score;
    }
  }, {
    key: "toString",
    value: function toString() {
      return JSON.stringify(this.values(), null, 3);
    }
  }, {
    key: "verbose",
    value: function verbose() {
      console.log("Gas resistance " + this.gas_resistance + "kOhm,\nhumidity " + this.humidity + "%\nAir Quality  " + String(this.air_quality_score, 1) + " %\nIAQ Score    " + this.iaqScore + "\n{this.getMessageFromScore(this.iaqScore)}\nHum element was " + String(this.hum_score / 100) + " of " + this.hum_weight + "\nGas element was " + String(this.gas_score / 100) + " of " + this.gas_weight);

      if (this.gas_resistance < 120000) {
        console.log("***** Poor air quality *****");
      }
      console.log("Derived from 25% of this.humidity reading and 75% of Gas reading");
      console.log("100% is good quality air");

      console.log('this.values()');
      console.log(this.toString());
    }
  }]);

  return IAQ;
}();

module.exports = IAQ;